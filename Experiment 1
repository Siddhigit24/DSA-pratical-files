#include <bits/stdc++.h>
using namespace std;

struct Name {
    char firstname[10];
    char lastname[12];
};

struct Profile {
    Name student_name;
    float SGPA;
    int Roll_no;
};

class StudentData {
private:
    Profile std_db[15] = {
        {"Priya", "Jadhav", 9.89, 9}, {"Abhijeet", "Ingle", 9.8, 6}, {"Kunal", "Bhosale", 9.54, 13},
        {"Pratik", "Shinde", 9.12, 4}, {"Ayush", "Kale", 9.65, 3}, {"Kunal", "Kachare", 9.5, 5},
        {"Sumit", "Inamdar", 9.01, 12}, {"Sanika", "Joshi", 9.2, 11}, {"Atharva", "Kakade", 9.8, 2},
        {"Mrunal", "Pawar", 9.45, 7}, {"Kalyani", "Nimbalkar", 8.97, 15}, {"Tanmay", "Bhise", 8.85, 14},
        {"Shruti", "Jagdale", 9.74, 1}, {"Neha", "Gore", 8.86, 10}, {"Akshay", "Kumbhar", 8.98, 8}
    };
    int n = 15;

public:
    void view() {
        cout << "\n\nStudent Records:\n";
        cout << "No.\tName\t\t\tSGPA\tRoll No.\n";
        cout << "--------------------------------------------\n";
        for (int i = 0; i < n; i++) {
            cout << i + 1 << ".\t" << std_db[i].student_name.firstname << " "
                 << std_db[i].student_name.lastname << "\t" << std_db[i].SGPA
                 << "\t" << std_db[i].Roll_no << "\n";
        }
    }

    void searchSGPA(float r) {
        cout << "\nSearching SGPA...\n";
        bool found = false;
        for (int i = 0; i < n; i++) {
            if (std_db[i].SGPA == r) {
                cout << "Found: " << std_db[i].student_name.firstname << " "
                     << std_db[i].student_name.lastname << ", Roll No: " << std_db[i].Roll_no
                     << ", SGPA: " << std_db[i].SGPA << "\n";
                found = true;
            }
        }
        if (!found) cout << "No student found with SGPA " << r << ".\n";
    }

    void sortNames() {
        for (int i = 1; i < n; i++) {
            Profile temp = std_db[i];
            int j = i - 1;
            while (j >= 0 && strcmp(std_db[j].student_name.firstname, temp.student_name.firstname) > 0) {
                std_db[j + 1] = std_db[j];
                j--;
            }
            std_db[j + 1] = temp;
        }
        cout << "Sorted by Names.\n";
    }

    void sortSGPA(int l, int r) {
        if (l >= r) return;
        int i = l, j = r;
        float pivot = std_db[l].SGPA;
        Profile temp = std_db[l];
        while (i < j) {
            while (std_db[i].SGPA <= pivot && i < r) i++;
            while (std_db[j].SGPA > pivot) j--;
            if (i < j) swap(std_db[i], std_db[j]);
        }
        std_db[l] = std_db[j];
        std_db[j] = temp;
        sortSGPA(l, j - 1);
        sortSGPA(j + 1, r);
    }

    void sortRollNo() {
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (std_db[j].Roll_no > std_db[j + 1].Roll_no) {
                    swap(std_db[j], std_db[j + 1]);
                }
            }
        }
        cout << "Sorted by Roll No.\n";
    }
};

int main() {
    StudentData std;
    char stopApp;
    do {
        cout << "\nMenu:\n";
        cout << "1. View Records\n2. Sort by Roll No.\n3. Sort by Names\n4. Sort by SGPA\n5. Search SGPA\n6. Exit\n";
        cout << "Enter choice: ";
        int choice;
        cin >> choice;

        switch (choice) {
            case 1:
                std.view();
                break;
            case 2:
                std.sortRollNo();
                std.view();
                break;
            case 3:
                std.sortNames();
                std.view();
                break;
            case 4:
                std.sortSGPA(0, 14);
                std.view();
                break;
            case 5: {
                cout << "Enter SGPA to search: ";
                float sgpa;
                cin >> sgpa;
                std.searchSGPA(sgpa);
                break;
            }
            case 6:
                cout << "Exiting program.\n";
                return 0;
            default:
                cout << "Invalid choice.\n";
        }

        cout << "Do you want to continue (Y/N)? ";
        cin >> stopApp;
    } while (toupper(stopApp) == 'Y');

    return 0;
}
