#include <iostream>
#include <vector>
#include <climits>
using namespace std;

// Function to find the vertex with the minimum distance value
int findMinDistance(vector<int> &dist, vector<bool> &visited, int n) {
    int minDistance = INT_MAX, minIndex = -1;
    for (int i = 0; i < n; i++) {
        if (!visited[i] && dist[i] < minDistance) {
            minDistance = dist[i];
            minIndex = i;
        }
    }
    return minIndex;
}

void dijkstra(vector<vector<int>> &graph, int source) {
    int n = graph.size();
    vector<int> dist(n, INT_MAX); // Stores the shortest distances
    vector<bool> visited(n, false); // Tracks visited nodes

    dist[source] = 0; // Distance to the source is 0

    for (int count = 0; count < n - 1; count++) {
        // Find the nearest unvisited node
        int u = findMinDistance(dist, visited, n);

        visited[u] = true;

        // Update distances of adjacent vertices of the selected node
        for (int v = 0; v < n; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the shortest distances from the source
    cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < n; i++) {
        cout << i << "\t" << dist[i] << "\n";
    }
}

int main() {
    int n;
    cout << "Enter the number of landmarks (nodes): ";
    cin >> n;

    vector<vector<int>> graph(n, vector<int>(n, 0));

    cout << "Enter the adjacency matrix (enter 0 if there is no direct path):\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> graph[i][j];
        }
    }

    int source;
    cout << "Enter the source landmark (node index starting from 0): ";
    cin >> source;

    dijkstra(graph, source);

    return 0;
}

