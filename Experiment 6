#include <iostream>
using namespace std;

class Node {
public:
    int data; // Data stored in the node
    Node* left; // Pointer to the left child or thread
    Node* right; // Pointer to the right child or thread
    bool isThreadLeft; // True if left pointer is a thread
    bool isThreadRight; // True if right pointer is a thread

    Node(int data) {
        this->data = data;
        left = right = nullptr;
        isThreadLeft = isThreadRight = false;
    }
};

class ThreadedBinaryTree {
private:
    Node* root; // Root of the tree

public:
    ThreadedBinaryTree() {
        root = nullptr; // Initialize an empty tree
    }

    void insert(int data) {
        if (!root) { // If tree is empty, create the root node
            root = new Node(data);
            return;
        }

        Node* current = root; // Start from the root
        Node* parent = nullptr; // To keep track of the parent node

        // Traverse the tree to find the correct position for the new node
        while (current) {
            parent = current;
            if (data < current->data) { // Move left
                if (current->isThreadLeft)
                    break; // Stop if a thread is encountered
                current = current->left;
            } else { // Move right
                if (current->isThreadRight)
                    break; // Stop if a thread is encountered
                current = current->right;
            }
        }

        Node* newNode = new Node(data); // Create a new node
        if (data < parent->data) { // Insert to the left
            newNode->left = parent->left; // Inherit parent’s left thread
            newNode->isThreadLeft = true;
            newNode->right = parent; // Establish a thread to the parent
            newNode->isThreadRight = true;
            parent->left = newNode; // Update parent’s left pointer
            parent->isThreadLeft = false;
        } else { // Insert to the right
            newNode->right = parent->right; // Inherit parent’s right thread
            newNode->isThreadRight = true;
            newNode->left = parent; // Establish a thread to the parent
            newNode->isThreadLeft = true;
            parent->right = newNode; // Update parent’s right pointer
            parent->isThreadRight = false;
        }
    }

    void inorderTraversal() {
        Node* current = root;

        // Go to the leftmost node
        while (current && !current->isThreadLeft) {
            current = current->left;
        }

        // Traverse using threads and child links
        while (current) {
            cout << current->data << " ";

            if (current->isThreadRight) {
                current = current->right; // Move to the in-order successor via thread
            } else {
                current = current->right; // Move to the right child
                while (current && !current->isThreadLeft) {
                    current = current->left; // Go to the leftmost node
                }
            }
        }
    }

    void preorderTraversal() {
        Node* current = root;

        // Traverse nodes in pre-order
        while (current) {
            cout << current->data << " ";

            if (!current->isThreadLeft) {
                current = current->left; // Move to the left child
            } else {
                current = current->right; // Use the thread to move to the next node
            }
        }
    }
};

int main() {
    ThreadedBinaryTree tbt;
    int elements[] = {20, 10, 30, 5, 15, 25, 35}; // Elements to insert

    for (int el : elements) {
        tbt.insert(el); // Insert each element into the tree
    }

    cout << "In-order Traversal:" << endl;
    tbt.inorderTraversal(); // Perform in-order traversal
    cout << "\nPre-order Traversal:" << endl;
    tbt.preorderTraversal(); // Perform pre-order traversal

    return 0; // End of the program
}
