#include <iostream>
#include <stack>
#include <string>
Using namespace std;

// Definition of TreeNode
Struct TreeNode {
    Char data;
    TreeNode* left;
    TreeNode* right;
    TreeNode(char val) : data(val), left(nullptr), right(nullptr) {}
};

// Function to construct an expression tree from a postfix expression
TreeNode* constructFromPostfix(string postfix) {
    Stack<TreeNode*> st;

    For (char ch : postfix) {
        If (isalnum(ch)) { // Operand
            St.push(new TreeNode(ch));
        } else { // Operator
            TreeNode* node = new TreeNode(ch);
            Node->right = st.top(); st.pop();
            Node->left = st.top(); st.pop();
            St.push(node);
        }
    }
    Return st.top();
}

// Function to construct an expression tree from a prefix expression
TreeNode* constructFromPrefix(string prefix) {
    Stack<TreeNode*> st;

    For (int I = prefix.length() – 1; I >= 0; i--) {
        Char ch = prefix[i];
        If (isalnum(ch)) { // Operand
            St.push(new TreeNode(ch));
        } else { // Operator
            TreeNode* node = new TreeNode(ch);
            Node->left = st.top(); st.pop();
            Node->right = st.top(); st.pop();
            St.push(node);
        }
    }
    Return st.top();
}

// Recursive inorder traversal
Void recursiveInorder(TreeNode* root) {
    If (!root) return;
    recursiveInorder(root->left);
    cout << root->data << “ “;
    recursiveInorder(root->right);
}

// Recursive postorder traversal
Void recursivePostorder(TreeNode* root) {
    If (!root) return;
    recursivePostorder(root->left);
    recursivePostorder(root->right);
    cout << root->data << “ “;
}

// Non-recursive inorder traversal
Void nonRecursiveInorder(TreeNode* root) {
    Stack<TreeNode*> st;
    TreeNode* curr = root;

    While (curr || !st.empty()) {
        While (curr) {
            St.push(curr);
            Curr = curr->left;
        }
        Curr = st.top(); st.pop();
        Cout << curr->data << “ “;
        Curr = curr->right;
    }
}

// Non-recursive postorder traversal
Void nonRecursivePostorder(TreeNode* root) {
    Stack<TreeNode*> st1, st2;
    St1.push(root);

    While (!st1.empty()) {
        TreeNode* curr = st1.top(); st1.pop();
        St2.push(curr);

        If (curr->left) st1.push(curr->left);
        If (curr->right) st1.push(curr->right);
    }

    While (!st2.empty()) {
        Cout << st2.top()->data << “ “;
        St2.pop();
    }
}

// Main function
Int main() {
    String postfix = “ab+cde+**”; // Example postfix expression
    String prefix = “*+ab*cd+e”;  // Example prefix expression

    Cout << “Constructing tree from postfix: “ << postfix << endl;
    TreeNode* rootPostfix = constructFromPostfix(postfix);
    Cout << “Recursive Inorder: “;
    recursiveInorder(rootPostfix);
    cout << “\nRecursive Postorder: “;
    recursivePostorder(rootPostfix);
    cout << “\nNon-Recursive Inorder: “;
    nonRecursiveInorder(rootPostfix);
    cout << “\nNon-Recursive Postorder: “;
    nonRecursivePostorder(rootPostfix);

    cout << “\n\nConstructing tree from prefix: “ << prefix << endl;
    TreeNode* rootPrefix = constructFromPrefix(prefix);
    Cout << “Recursive Inorder: “;
    recursiveInorder(rootPrefix);
    cout << “\nRecursive Postorder: “;
    recursivePostorder(rootPrefix);
    cout << “\nNon-Recursive Inorder: “;
    nonRecursiveInorder(rootPrefix);
    cout << “\nNon-Recursive Postorder: “;
    nonRecursivePostorder(rootPrefix);

    return 0;
}
