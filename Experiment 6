#include <iostream>
#include <stack>
#include <string>
using namespace std;

// Definition of TreeNode
struct TreeNode {
    char data;
    TreeNode* left;
    TreeNode* right;
    TreeNode(char val) : data(val), left(nullptr), right(nullptr) {}
};

// Function to construct an expression tree from a postfix expression
TreeNode* constructFromPostfix(string postfix) {
    stack<TreeNode*> st;

    for (char ch : postfix) {
        if (isalnum(ch)) { // Operand
            st.push(new TreeNode(ch));
        } else { // Operator
            TreeNode* node = new TreeNode(ch);
            node->right = st.top(); st.pop();
            node->left = st.top(); st.pop();
            st.push(node);
        }
    }
    return st.top();
}

// Function to construct an expression tree from a prefix expression
TreeNode* constructFromPrefix(string prefix) {
    stack<TreeNode*> st;

    for (int i = prefix.length() - 1; i >= 0; i--) {
        char ch = prefix[i];
        if (isalnum(ch)) { // Operand
            st.push(new TreeNode(ch));
        } else { // Operator
            TreeNode* node = new TreeNode(ch);
            node->left = st.top(); st.pop();
            node->right = st.top(); st.pop();
            st.push(node);
        }
    }
    return st.top();
}

// Recursive inorder traversal
void recursiveInorder(TreeNode* root) {
    if (!root) return;
    recursiveInorder(root->left);
    cout << root->data << " ";
    recursiveInorder(root->right);
}

// Recursive postorder traversal
void recursivePostorder(TreeNode* root) {
    if (!root) return;
    recursivePostorder(root->left);
    recursivePostorder(root->right);
    cout << root->data << " ";
}

// Non-recursive inorder traversal
void nonRecursiveInorder(TreeNode* root) {
    stack<TreeNode*> st;
    TreeNode* curr = root;

    while (curr || !st.empty()) {
        while (curr) {
            st.push(curr);
            curr = curr->left;
        }
        curr = st.top(); st.pop();
        cout << curr->data << " ";
        curr = curr->right;
    }
}

// Non-recursive postorder traversal
void nonRecursivePostorder(TreeNode* root) {
    stack<TreeNode*> st1, st2;
    if (root) st1.push(root);

    while (!st1.empty()) {
        TreeNode* curr = st1.top(); st1.pop();
        st2.push(curr);

        if (curr->left) st1.push(curr->left);
        if (curr->right) st1.push(curr->right);
    }

    while (!st2.empty()) {
        cout << st2.top()->data << " ";
        st2.pop();
    }
}

// Main function
int main() {
    string postfix = "ab+cde+**"; // Example postfix expression
    string prefix = "*+ab*cd+e";  // Example prefix expression

    cout << "Constructing tree from postfix: " << postfix << endl;
    TreeNode* rootPostfix = constructFromPostfix(postfix);
    cout << "Recursive Inorder: ";
    recursiveInorder(rootPostfix);
    cout << "\nRecursive Postorder: ";
    recursivePostorder(rootPostfix);
    cout << "\nNon-Recursive Inorder: ";
    nonRecursiveInorder(rootPostfix);
    cout << "\nNon-Recursive Postorder: ";
    nonRecursivePostorder(rootPostfix);

    cout << "\n\nConstructing tree from prefix: " << prefix << endl;
    TreeNode* rootPrefix = constructFromPrefix(prefix);
    cout << "Recursive Inorder: ";
    recursiveInorder(rootPrefix);
    cout << "\nRecursive Postorder: ";
    recursivePostorder(rootPrefix);
    cout << "\nNon-Recursive Inorder: ";
    nonRecursiveInorder(rootPrefix);
    cout << "\nNon-Recursive Postorder: ";
    nonRecursivePostorder(rootPrefix);

    return 0;
}
