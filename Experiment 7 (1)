#include <iostream>
#include <vector>
#include <climits>
using namespace std;

class Graph {
    int vertices;
    vector<vector<int>> adjMatrix;

public:
    Graph(int v) : vertices(v) {
        adjMatrix.resize(v, vector<int>(v, 0));
    }

    void createGraph() {
        cout << "Enter the adjacency matrix (0 for no direct connection, positive numbers for distances):\n";
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                cin >> adjMatrix[i][j];
            }
        }
    }

    void displayGraph() {
        cout << "Adjacency Matrix:\n";
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                cout << adjMatrix[i][j] << " ";
            }
            cout << endl;
        }
    }

    void primMST() {
        vector<int> key(vertices, INT_MAX);
        vector<bool> inMST(vertices, false);
        vector<int> parent(vertices, -1);
        key[0] = 0;

        for (int count = 0; count < vertices - 1; count++) {
            int u = -1;
            for (int i = 0; i < vertices; i++) {
                if (!inMST[i] && (u == -1 || key[i] < key[u])) {
                    u = i;
                }
            }

            inMST[u] = true;

            for (int v = 0; v < vertices; v++) {
                if (adjMatrix[u][v] && !inMST[v] && adjMatrix[u][v] < key[v]) {
                    key[v] = adjMatrix[u][v];
                    parent[v] = u;
                }
            }
        }

        cout << "Minimum Spanning Tree (Edge : Weight):\n";
        for (int i = 1; i < vertices; i++) {
            cout << parent[i] << " - " << i << " : " << adjMatrix[i][parent[i]] << endl;
        }
    }
};

int main() {
    int vertices;
    cout << "Enter the number of locations (vertices): ";
    cin >> vertices;

    Graph g(vertices);
    int choice;

    do {
        cout << "\nMenu:\n1. Create Graph\n2. Display Graph\n3. Find MST using Primâ€™s Algorithm\n4. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                g.createGraph();
                break;
            case 2:
                g.displayGraph();
                break;
            case 3:
                g.primMST();
                break;
            case 4:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 4);

    return 0;
}
