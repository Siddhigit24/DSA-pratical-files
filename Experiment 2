#include <iostream>
#include <stack>
#include <string>
#include <algorithm>
#include <cctype>
#include <cmath>

using namespace std;

// Helper functions
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;
}

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

string infixToPostfix(string expression) {
    stack<char> s;
    string result = "";
    for (char &ch : expression) {
        if (isalnum(ch)) {
            result += ch; // Operand goes to result
        } else if (ch == '(') {
            s.push(ch); // Push '(' to stack
        } else if (ch == ')') {
            while (!s.empty() && s.top() != '(') {
                result += s.top(); // Pop and append operators
                s.pop();
            }
            s.pop(); // Remove '('
        } else { // Operator
            while (!s.empty() && precedence(s.top()) >= precedence(ch)) {
                result += s.top();
                s.pop();
            }
            s.push(ch); // Push current operator
        }
    }
    while (!s.empty()) { // Append remaining operators
        result += s.top();
        s.pop();
    }
    return result;
}

string infixToPrefix(string expression) {
    reverse(expression.begin(), expression.end()); // Reverse the expression
    for (char &ch : expression) {
        if (ch == '(') ch = ')'; // Swap '(' and ')'
        else if (ch == ')') ch = '(';
    }
    string postfix = infixToPostfix(expression);
    reverse(postfix.begin(), postfix.end()); // Reverse postfix to get prefix
    return postfix;
}

int evaluatePostfix(string expression) {
    stack<int> s;
    for (char &ch : expression) {
        if (isdigit(ch)) {
            s.push(ch - '0'); // Push operand as integer
        } else {
            int b = s.top(); s.pop();
            int a = s.top(); s.pop();
            switch (ch) {
                case '+': s.push(a + b); break;
                case '-': s.push(a - b); break;
                case '*': s.push(a * b); break;
                case '/': s.push(a / b); break;
                case '^': s.push(pow(a, b)); break;
            }
        }
    }
    return s.top();
}

int evaluatePrefix(string expression) {
    stack<int> s;
    reverse(expression.begin(), expression.end()); // Reverse prefix expression
    for (char &ch : expression) {
        if (isdigit(ch)) {
            s.push(ch - '0'); // Push operand as integer
        } else {
            int a = s.top(); s.pop();
            int b = s.top(); s.pop();
            switch (ch) {
                case '+': s.push(a + b); break;
                case '-': s.push(a - b); break;
                case '*': s.push(a * b); break;
                case '/': s.push(a / b); break;
                case '^': s.push(pow(a, b)); break;
            }
        }
    }
    return s.top();
}

// Main function
int main() {
    string infix = "a+b*(c^d-e)^(f+g*h)-I";

    cout << "Infix Expression: " << infix << endl;
    cout << "Postfix Expression: " << infixToPostfix(infix) << endl;
    cout << "Prefix Expression: " << infixToPrefix(infix) << endl;

    string postfix = "53+82-*";
    string prefix = "-+5*34/82";

    cout << "Evaluate Postfix ('53+82-*'): " << evaluatePostfix(postfix) << endl;
    cout << "Evaluate Prefix ('-+5*34/82'): " << evaluatePrefix(prefix) << endl;

    return 0;
}
