#include <iostream>
using namespace std;

class CircularQueue {
    int *arr;        // Array to hold queue elements
    int front, rear, size; // Pointers to front, rear, and size of the queue
    int capacity;    // Maximum capacity of the queue

public:
    // Constructor to initialize the queue
    CircularQueue(int cap) {
        capacity = cap;
        arr = new int[capacity];
        front = -1;
        rear = -1;
        size = 0;
    }

    // Insertion in the queue
    void enqueue(int value) {
        if (size == capacity) {
            cout << "Queue is full!\n";
            return;
        }
        if (front == -1) front = 0; // Initialize front if the queue was empty
        rear = (rear + 1) % capacity; // Circular increment of rear
        arr[rear] = value;           // Insert value
        size++;
    }

    // Deletion from the queue
    void dequeue() {
        if (size == 0) {
            cout << "Queue is empty!\n";
            return;
        }
        front = (front + 1) % capacity; // Circular increment of front
        size--;
        if (size == 0) front = rear = -1; // Reset queue when it becomes empty
    }

    // Display elements of the queue
    void display() {
        if (size == 0) {
            cout << "Queue is empty!\n";
            return;
        }
        cout << "Queue elements: ";
        for (int i = 0; i < size; i++) {
            cout << arr[(front + i) % capacity] << " "; // Display in circular order
        }
        cout << endl;
    }

    // Destructor to free allocated memory
    ~CircularQueue() {
        delete[] arr;
    }
};

int main() {
    CircularQueue q(5); // Create a queue with capacity 5

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.display(); // Output: 10 20 30

    q.dequeue();
    q.display(); // Output: 20 30

    q.enqueue(40);
    q.enqueue(50);
    q.enqueue(60);
    q.display(); // Output: 20 30 40 50 60

    q.enqueue(70); // Should display: Queue is full!

    return 0;
}
