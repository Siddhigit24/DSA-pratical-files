#include <iostream> // Includes the standard input/output library
Using namespace std; // Allows usage of standard namespace identifiers directly

// Function to heapify a subtree rooted at index `i`
Void heapify(int arr[], int n, int i) {
    Int largest = I; // Assume the root node is the largest
    Int left = 2 * I + 1; // Calculate the index of the left child
    Int right = 2 * I + 2; // Calculate the index of the right child

    // Check if the left child exists and is larger than the root
    If (left < n && arr[left] > arr[largest])
        Largest = left; // Update largest if left child is greater

    // Check if the right child exists and is larger than the largest so far
    If (right < n && arr[right] > arr[largest])
        Largest = right; // Update largest if right child is greater

    // If the largest is not the root node
    If (largest != i) {
        Swap(arr[i], arr[largest]); // Swap the root with the largest child

        // Recursively heapify the subtree affected by the swap
        Heapify(arr, n, largest);
    }
}

// Function to perform heap sort
Void heapSort(int arr[], int n) {
    // Step 1: Build the max heap
    For (int I = n / 2 – 1; I >= 0; i--) // Start from the last non-leaf node
        Heapify(arr, n, i); // Heapify each subtree

    // Step 2: Extract elements from the heap one by one
    For (int I = n – 1; I > 0; i--) {
        Swap(arr[0], arr[i]); // Move the current root (largest) to the end

        Heapify(arr, I, 0); // Reheapify the reduced heap
    }
}

// Helper function to print an array
Void printArray(int arr[], int n) {
    For (int I = 0; I < n; i++) // Iterate through the array
        Cout << arr[i] << “ “; // Print each element followed by a space
    Cout << endl; // End the line after printing all elements
}

Int main() {
    Int arr[] = {12, 11, 13, 5, 6, 7}; // Input array
    Int n = sizeof(arr) / sizeof(arr[0]); // Calculate the number of elements

    Cout << “Original array: \n”; // Print a message
    printArray(arr, n); // Print the original array

    heapSort(arr, n); // Perform heap sort

    cout << “\nSorted array: \n”; // Print a message
    printArray(arr, n); // Print the sorted array

    return 0; // Exit the program
}
