#include <iostream>
using namespace std;

// Definition of the node structure
struct Node {
    int data;           // Value stored in the node
    Node* left;         // Pointer to the left child
    Node* right;        // Pointer to the right child

    // Constructor for creating a new node
    Node(int val) {
        data = val;
        left = nullptr;
        right = nullptr;
    }
};

// Function to insert a value into the BST
Node* insert(Node* root, int val) {
    if (root == nullptr) {
        // If the tree is empty, create a new node as the root
        return new Node(val);
    }
    if (val < root->data) {
        // If the value is smaller, insert it in the left subtree
        root->left = insert(root->left, val);
    } else if (val > root->data) {
        // If the value is larger, insert it in the right subtree
        root->right = insert(root->right, val);
    }
    return root; // Return the unchanged root node
}

// Function to find the minimum value node in a tree
Node* findMin(Node* root) {
    while (root && root->left != nullptr) {
        root = root->left;
    }
    return root;
}

// Function to delete a node from the BST
Node* deleteNode(Node* root, int key) {
    if (root == nullptr) {
        return root; // Base case: tree is empty
    }
    if (key < root->data) {
        // If the key is smaller, move to the left subtree
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        // If the key is larger, move to the right subtree
        root->right = deleteNode(root->right, key);
    } else {
        // Node to be deleted is found
        if (root->left == nullptr) {
            Node* temp = root->right;
            delete root; // Free the memory
            return temp;
        } else if (root->right == nullptr) {
            Node* temp = root->left;
            delete root; // Free the memory
            return temp;
        }
        // Node with two children: find the in-order successor (minimum in the right subtree)
        Node* temp = findMin(root->right);
        root->data = temp->data; // Copy the successorâ€™s value
        root->right = deleteNode(root->right, temp->data); // Delete the successor
    }
    return root;
}

// Function to search for a value in the BST
bool search(Node* root, int key) {
    if (root == nullptr) {
        return false; // Base case: value not found
    }
    if (root->data == key) {
        return true; // Value found
    }
    if (key < root->data) {
        return search(root->left, key); // Search in the left subtree
    }
    return search(root->right, key); // Search in the right subtree
}

// In-order traversal of the BST (for display purposes)
void inorder(Node* root) {
    if (root == nullptr) {
        return;
    }
    inorder(root->left); // Visit the left subtree
    cout << root->data << " "; // Print the root value
    inorder(root->right); // Visit the right subtree
}

int main() {
    Node* root = nullptr; // Start with an empty tree

    // Insert values into the BST
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 70);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 60);
    root = insert(root, 80);

    // Display the BST in in-order traversal
    cout << "In-order traversal of the BST: ";
    inorder(root);
    cout << endl;

    // Search for a value
    int key = 40;
    if (search(root, key)) {
        cout << key << " is found in the BST." << endl;
    } else {
        cout << key << " is not found in the BST." << endl;
    }

    // Delete a node
    root = deleteNode(root, 50);
    cout << "In-order traversal after deleting 50: ";
    inorder(root);
    cout << endl;

    return 0;
}
