#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Graph {
    int vertices;
    vector<pair<int, pair<int, int>>> edges; // {weight, {u, v}}

public:
    Graph(int v) : vertices(v) {}

    void createGraph() {
        int u, v, weight;
        cout << "Enter the number of edges: ";
        int edgeCount;
        cin >> edgeCount;
        cout << "Enter edges in the format (u v weight) where u and v are vertices (0-based):\n";
        for (int i = 0; i < edgeCount; i++) {
            cin >> u >> v >> weight;
            edges.push_back({weight, {u, v}});
        }
    }

    void displayGraph() {
        cout << "Edges in the Graph (u - v : weight):\n";
        for (auto &edge : edges) {
            cout << edge.second.first << " - " << edge.second.second << " : " << edge.first << endl;
        }
    }

    int findParent(int v, vector<int> &parent) {
        if (parent[v] == v)
            return v;
        return parent[v] = findParent(parent[v], parent); // Path compression
    }

    void unionSets(int u, int v, vector<int> &parent, vector<int> &rank) {
        int rootU = findParent(u, parent);
        int rootV = findParent(v, parent);

        if (rank[rootU] < rank[rootV]) {
            parent[rootU] = rootV;
        } else if (rank[rootU] > rank[rootV]) {
            parent[rootV] = rootU;
        } else {
            parent[rootV] = rootU;
            rank[rootU]++;
        }
    }

    void kruskalMST() {
        sort(edges.begin(), edges.end()); // Sort edges by weight

        vector<int> parent(vertices);
        vector<int> rank(vertices, 0);

        for (int i = 0; i < vertices; i++) {
            parent[i] = i;
        }

        vector<pair<int, pair<int, int>>> mst;
        int mstWeight = 0;

        for (auto &edge : edges) {
            int weight = edge.first;
            int u = edge.second.first;
            int v = edge.second.second;

            if (findParent(u, parent) != findParent(v, parent)) {
                mst.push_back(edge);
                mstWeight += weight;
                unionSets(u, v, parent, rank);
            }
        }

        cout << "Minimum Spanning Tree (Edge : Weight):\n";
        for (auto &edge : mst) {
            cout << edge.second.first << " - " << edge.second.second << " : " << edge.first << endl;
        }
        cout << "Total Weight of MST: " << mstWeight << endl;
    }
};

int main() {
    int vertices;
    cout << "Enter the number of vertices: ";
    cin >> vertices;

    Graph g(vertices);
    int choice;

    do {
        cout << "\nMenu:\n1. Create Graph\n2. Display Graph\n3. Find MST using Kruskalâ€™s Algorithm\n4. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                g.createGraph();
                break;
            case 2:
                g.displayGraph();
                break;
            case 3:
                g.kruskalMST();
                break;
            case 4:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 4);

    return 0;
}
